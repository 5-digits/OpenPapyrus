/*
 * Summary: Unicode character range checking
 * Description: this module exports interfaces for the character range validation APIs
 *
 * This file is automatically generated from the cvs source
 * definition files using the genChRanges.py Python script
 *
 * Generation date: Mon Mar 27 11:09:48 2006
 * Sources: chvalid.def
 * Author: William Brack <wbrack@mmm.com.hk>
 */
#ifndef __XML_CHVALID_H__
#define __XML_CHVALID_H__

#ifdef __cplusplus
extern "C" {
#endif
// 
// Descr: Define our typedefs and structures
// 
struct xmlChSRange {
	ushort low;
	ushort high;
};

struct xmlChLRange {
	uint low;
	uint high;
};

struct xmlChRangeGroup {
	int nbShortRange;
	int nbLongRange;
	const xmlChSRange * shortRange; /* points to an array of ranges */
	const xmlChLRange * longRange;
};

typedef xmlChSRange * xmlChSRangePtr;
typedef xmlChLRange * xmlChLRangePtr;
typedef xmlChRangeGroup * xmlChRangeGroupPtr;
// 
// Descr: Range checking routine
// 
XMLPUBFUN int /*XMLCALL*/FASTCALL xmlCharInRange(uint val, const xmlChRangeGroup * group);
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsBaseChar_ch(c) (((0x41 <= (c)) && ((c) <= 0x5a)) || ((0x61 <= (c)) && ((c) <= 0x7a)) || ((0xc0 <= (c)) && ((c) <= 0xd6)) || ((0xd8 <= (c)) && ((c) <= 0xf6)) || (0xf8 <= (c)))
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsBaseCharQ(c) (((c) < 0x100) ? xmlIsBaseChar_ch((c)) : xmlCharInRange((c), &xmlIsBaseCharGroup))

XMLPUBVAR const xmlChRangeGroup xmlIsBaseCharGroup;
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsBlank_ch(c) (((c) == 0x20) || ((0x9 <= (c)) && ((c) <= 0xa)) || ((c) == 0xd))
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsBlankQ(c) (((c) < 0x100) ? xmlIsBlank_ch((c)) : 0)
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsChar_ch(c) (((0x9 <= (c)) && ((c) <= 0xa)) || ((c) == 0xd) || (0x20 <= (c)))
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsCharQ(c) (((c) < 0x100) ? xmlIsChar_ch((c)) : (((0x100 <= (c)) && ((c) <= 0xd7ff)) || ((0xe000 <= (c)) && ((c) <= 0xfffd)) || ((0x10000 <= (c)) && ((c) <= 0x10ffff))))

XMLPUBVAR const xmlChRangeGroup xmlIsCharGroup;
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsCombiningQ(c) (((c) < 0x100) ? 0 : xmlCharInRange((c), &xmlIsCombiningGroup))

XMLPUBVAR const xmlChRangeGroup xmlIsCombiningGroup;
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsDigit_ch(c)        (((0x30 <= (c)) && ((c) <= 0x39)))
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsDigitQ(c) (((c) < 0x100) ? xmlIsDigit_ch((c)) : xmlCharInRange((c), &xmlIsDigitGroup))

XMLPUBVAR const xmlChRangeGroup xmlIsDigitGroup;
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsExtender_ch(c)     (((c) == 0xb7))
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsExtenderQ(c) (((c) < 0x100) ? xmlIsExtender_ch((c)) : xmlCharInRange((c), &xmlIsExtenderGroup))

XMLPUBVAR const xmlChRangeGroup xmlIsExtenderGroup;
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsIdeographicQ(c) (((c) < 0x100) ? 0 : (((0x4e00 <= (c)) && ((c) <= 0x9fa5)) || ((c) == 0x3007) || ((0x3021 <= (c)) && ((c) <= 0x3029))))

XMLPUBVAR const xmlChRangeGroup xmlIsIdeographicGroup;
XMLPUBVAR const uchar xmlIsPubidChar_tab[256];
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsPubidChar_ch(c)    (xmlIsPubidChar_tab[(c)])
// 
// @c: char to validate
// Automatically generated by genChRanges.py
// 
#define xmlIsPubidCharQ(c) (((c) < 0x100) ? xmlIsPubidChar_ch((c)) : 0)

XMLPUBFUN int XMLCALL xmlIsBaseChar(uint ch);
XMLPUBFUN int XMLCALL xmlIsBlank(uint ch);
XMLPUBFUN int XMLCALL xmlIsChar(uint ch);
XMLPUBFUN int XMLCALL xmlIsCombining(uint ch);
XMLPUBFUN int XMLCALL xmlIsDigit(uint ch);
XMLPUBFUN int XMLCALL xmlIsExtender(uint ch);
XMLPUBFUN int XMLCALL xmlIsIdeographic(uint ch);
XMLPUBFUN int XMLCALL xmlIsPubidChar(uint ch);

#ifdef __cplusplus
}
#endif
#endif /* __XML_CHVALID_H__ */
